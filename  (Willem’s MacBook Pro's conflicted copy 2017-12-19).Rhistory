cox_long$affect <- factor(cox_long$affect)
# One within subject factor
model4_5 <- aov(score ~ affect + Error(ID/affect), data = cox_long)
summary(model4_5)
results <- add_stats(model4_5, results, identifier = "M4_5")
# Mixed design
model4_6 <- aov(score ~ condition * affect + Error(ID/affect) + condition, data = cox_long)
summary(model4_6)
results <- add_stats(model4_6, results, identifier = "M4_6")
# ANCOVA with within subject factor
model4_7 <- aov(score ~ affect + anxiety + Error(ID/affect) + anxiety, data = cox_long)
summary(model4_7)
results <- add_stats(model4_7, results, identifier = "M4_7")
write_stats(results, "docs/tests/results.csv")
write_stats(results, "docs/tests/results.csv", digits = 3)
# Convert list to a data frame
df <- stats_list_to_df(results)
df
# Round the stats values
df$value <- format(df$value, digits = digits, nsmall = 2)
digits = 3
# Round the stats values
df$value <- format(df$value, digits = digits, nsmall = 2)
df
# Convert list to a data frame
df <- stats_list_to_df(results)
format(df$value, digits = digits, nsmall = 2)
df$value
# Convert list to a data frame
df <- stats_list_to_df(results)
df
df$value
format(34.0337, digits = digits, nsmall = 2)
format(c(34.0337, 199), digits = digits, nsmall = 2)
format(df$value, digits = digits, nsmall = 2)
format(df$value, digits = digits, nsmall = 2, trim = T)
round(df$value)
round(df$value, 2)
format(df$value)
format(df$value, digits = 2)
prettyNum(df$value, digits = 3)
prettyNum(df$value, digits = 4)
df$value
format(df$value, digits = 2)
format(df$value)
format(df$value, scientific = T)
format(df$value, scientific = T, nsmall = 4)
format(df$value, scientific = T, nsmall = 12)
format(df$value, scientific = T, nsmall = 3)
format(df$value)
format(df$value, digits = 3)
format(round(df$value, digits=2), nsmall = 2)
format(df$value, nsmall = 2)
format(df$value, digits = 2, nsmall = 2)
format(df$value, digits = 2)
format(df$value, digits = 12)
format(df$value, digits = 12, trim = T)
?format
prettyNum(df$value)
document()
install()
write_stats(results, "docs/tests/results.csv")
?add_footnote
output
# Extract the results of the specific model through its identifier
res <- results[[identifier]]
# Separate the terms and model statistics
res_terms <- filter(res, term != "(Model)")
res_model <- filter(res, term == "(Model)")
identifier <- "M3_1"
# Extract the results of the specific model through its identifier
res <- results[[identifier]]
# Separate the terms and model statistics
res_terms <- filter(res, term != "(Model)")
res_model <- filter(res, term == "(Model)")
# Filter out terms, if provided
if (!is.null(terms)) {
res_terms <- filter(res_terms, term %in% terms)
} else if (!is.null(term_nrs)) {
res_terms <- filter(res_terms, term_nr %in% term_nrs)
}
# Prepare term results
res_terms <- res_terms %>%
spread(statistic, value) %>%
select(-term_nr, -method) %>%
rename(Term = term) %>%
select(Term, b, SE, t, df, p)
# Replace term labels, if provided
if (!is.null(term_labels)) {
res_terms$Term <- term_labels
}
# Filter out statistics, if provided
if (!is.null(statistics)) {
# Check if the statistics argument only contains valid statistics
if (sum(!statistics %in% c("b", "SE", "t", "df", "p")) > 0) {
stop("The statistics argument contains invalid statistics.")
}
res_terms <- select(res_terms, Term, one_of(statistics))
}
# Create table
output <- kable(res_terms, caption = paste("Regression output of", identifier))
output
footnote_model <- report_lm(results, identifier, term = "(Model)")
kableExtra::add_footnote(output, footnote_model, notation = "symbol")
kableExtra::add_footnote(output, footnote_model, notation = "number")
# Create table
output <- kable(res_terms, caption = paste("Regression output of", identifier)) %>%
kable_styling("striped")
output
kableExtra::add_footnote(output, footnote_model, notation = "number")
# Create table
output <- kable(res_terms, caption = paste("Regression output of", identifier))
# Create table
kable(res_terms)
# Create table
kable(res_terms) %>%
kable_styling()
# Create table
kable(res_terms, format = "html") %>%
kable_styling()
# Create table
kable(res_terms, format = "html") %>%
kable_styling() %>%
kableExtra::add_footnote(output, footnote_model, notation = "number")
# Create table
kable(res_terms, format = "html") %>%
kable_styling() %>%
kableExtra::add_footnote(footnote_model, notation = "number")
# Create table
kable(res_terms) %>%
kable_styling() %>%
kableExtra::add_footnote(footnote_model, notation = "number")
# Create table
kable(res_terms, format = "html") %>%
kable_styling() %>%
kableExtra::add_footnote(footnote_model, notation = "number")
# Create table
kable(res_terms) %>%
kableExtra::add_footnote(footnote_model, notation = "number")
getOption("render")
getOption("knitr.table.format")
# Create table
kable(res_terms, format = "html") %>%
kableExtra::add_footnote(footnote_model, notation = "number")
# Create table
kable(res_terms) %>%
kableExtra::add_footnote(footnote_model, notation = "number")
kable(res_terms)
opts_knit$get("rmarkdown.pandoc.to")
opts_knit$get("knitr.table.format")
opts_knit$get("rmarkdown.pandoc.to")
rmarkdown::all_output_formats(knitr::current_input())
install()
install()
install()
install()
output
kableExtra::add_footnote(output, footnote_model, notation = "number")
kableExtra::add_footnote(output, footnote_model)
kableExtra::add_footnote(output, footnote_model, notation = "")
kableExtra::add_footnote(output, footnote_model, notation = "s")
install()
install()
install()
report_lm(results, identifier, term = "(Model)")
install()
install()
res_terms
report_p_value(res_terms$p)
report_p_value <- function(p_value) {
p_value <- if_else(p_value >= .001,
paste("*p* =", gsub(pattern = "0\\.", replacement = ".",
x = format(p_value, digits = 2))),
paste("*p* < .001"))
return(p_value)
}
report_p_value(0.04)
report_p_value(c(0.04, 0.00002))
install()
res_terms
report_p_value(res_terms$p)
#' Report p-value function
#'
#' A helper function to report p values in APA style.
#'
#' @param p_value One or more p-values.
#'
#' @examples
#' report_p_value(0.532)
#' report_p_value(0.0432)
#' report_p_value(0.0000121)
#' report_p_value(0.321, 0.0312, 0.00000098)
#'
#' @export
report_p_value <- function(p_value) {
p_value <- if_else(p_value >= .001,
paste("*p* =", gsub(pattern = "0\\.", replacement = ".",
x = prettyNum(p_value))),
paste("*p* < .001"))
return(p_value)
}
report_p_value(res_terms$p)
prettyNum(res_terms$p)
prettyNum(res_terms$p, big.mark = 3)
prettyNum(res_terms$p, big.mark = 2)
prettyNum(res_terms$p, big.mark = 2342)
prettyNum(res_terms$p, decimal.mark = 3)
format(res_terms$p)
format(res_terms$p, digits = 3)
format(res_terms$p, digits = 3, nsmall = 2)
format(res_terms$p, digits = 3)
round(res_terms$p, digits = 3)
#' Report p-value function
#'
#' A helper function to report p values in APA style.
#'
#' @param p_value One or more p-values.
#'
#' @examples
#' report_p_value(0.532)
#' report_p_value(0.0432)
#' report_p_value(0.0000121)
#' report_p_value(0.321, 0.0312, 0.00000098)
#'
#' @export
report_p_value <- function(p_value) {
p_value <- if_else(p_value >= .001,
paste("*p* =", gsub(pattern = "0\\.", replacement = ".",
x = round(p_value, digits = 3))),
paste("*p* < .001"))
return(p_value)
}
report_p_value(res_terms$p)
report_p_value(0.00000232, 0.012)
report_p_value(c(0.00000232, 0.012))
report_p_value(c(0.00000232, 0.012322))
report_p_value(c(0.00000232, 0.0012))
report_p_value(c(0.00000232, 0.00123232))
report_p_value(c(0.00000232, 0.00143232))
report_p_value(c(0.00000232, 0.00153232))
install()
document()
install()
install()
install()
res_terms$p <- report_p_value(res_terms$p)
gsub("p ", "", res_terms$p)
gsub("*p* ", "", res_terms$p)
gsub("\*p\* ", "", res_terms$p)
gsub("/*p/* ", "", res_terms$p)
gsub("/*p/*", "", res_terms$p)
gsub("//*p//*", "", res_terms$p)
gsub("//*p*", "", res_terms$p)
gsub("p", "", res_terms$p)
gsub("*", "", res_terms$p)
gsub("/*", "", res_terms$p)
gsub("//*", "", res_terms$p)
gsub("///*", "", res_terms$p)
gsub("[*]", "", res_terms$p)
gsub("[*p*]", "", res_terms$p)
gsub("[*p* ]", "", res_terms$p)
gsub("[*p* =]", "", res_terms$p)
gsub("{*p* }", "", res_terms$p)
gsub("{/*p/* }", "", res_terms$p)
gsub("[*p=]", "", res_terms$p)
gsub("  ", " ", res_terms$p)
res_terms$p <- gsub("[*p=]", "", res_terms$p)
gsub("  ", " ", res_terms$p)
gsub("  ", "", res_terms$p)
res_terms$p <- report_p_value(res_terms$p)
# Extract the results of the specific model through its identifier
res <- results[[identifier]]
# Separate the terms and model statistics
res_terms <- filter(res, term != "(Model)")
res_model <- filter(res, term == "(Model)")
# Filter out terms, if provided
if (!is.null(terms)) {
res_terms <- filter(res_terms, term %in% terms)
} else if (!is.null(term_nrs)) {
res_terms <- filter(res_terms, term_nr %in% term_nrs)
}
# Prepare term results
res_terms <- res_terms %>%
spread(statistic, value) %>%
select(-term_nr, -method) %>%
rename(Term = term) %>%
select(Term, b, SE, t, df, p)
# Replace term labels, if provided
if (!is.null(term_labels)) {
res_terms$Term <- term_labels
}
# Filter out statistics, if provided
if (!is.null(statistics)) {
# Check if the statistics argument only contains valid statistics
if (sum(!statistics %in% c("b", "SE", "t", "df", "p")) > 0) {
stop("The statistics argument contains invalid statistics.")
}
res_terms <- select(res_terms, Term, one_of(statistics))
}
# Format p-values, if requested
if ("p" %in% names(res_terms)) {
res_terms$p <- report_p_value(res_terms$p)
res_terms$p <- gsub("[*p= ]", "", res_terms$p)
res_terms$p <- gsub(">", "> ", res_terms$p)
}
res_terms$p
gsub("<", "< ", res_terms$p)
install()
install()
kable(res_terms, format = format, escape = FALSE, digits = 2) %>%
kable_styling(full_width = FALSE, position = "left")
format
format = "html"
kable(res_terms, format = format, escape = FALSE, digits = 2) %>%
kable_styling(full_width = FALSE, position = "left")
document()
install()
output
output <- kable(res_terms, format = format, escape = FALSE, digits = 2) %>%
kable_styling(full_width = FALSE, position = "left")
# Prepare model results, if not excluded
if (include_model) {
footnote_model <- paste("Model:", report_lm(results, identifier, term = "(Model)"))
output <- kableExtra::add_footnote(output, footnote_model, notation = "number")
}
footnote_model <- paste("Model:", report_lm(results, identifier, term = "(Model)"))
output <- kableExtra::add_footnote(output, footnote_model, notation = "number")
output
library(devtools)
install()
library(tidystats)
library(tidyverse)
results <- list()
# Set options
options(digits = 7, scipen = 99)
# Test t-tests --------------------------------------------------------------------------------
# Use the 'cox' data set
cox
# One sample t-test
model1_1 <- t.test(cox$call_parent)
model1_1
results <- add_stats(model1_1, results, identifier = "M1_1", statistics = c("t", "df", "p"),
type = "h", confirmatory = TRUE)
# Two sample t-test
model1_2 <- t.test(call_parent ~ condition, data = cox, var.equal = TRUE)
model1_2
results <- add_stats(model1_2, results, identifier = "M1_2")
# Welch's Two sample t-test
model1_3 <- t.test(call_parent ~ condition, data = cox, var.equal = FALSE)
model1_3
results <- add_stats(model1_3, results, identifier = "M1_3")
# Paired t-test
model1_4 <- t.test(cox$affect_positive, cox$affect_negative, data = cox, paired = TRUE)
model1_4
results <- add_stats(model1_4, results, identifier = "M1_4")
# Test correlation --------------------------------------------------------
# Pearson's product-moment correlation
model2_1 <- cor.test(cox$call_parent, cox$anxiety, method = "pearson")
model2_1
results <- add_stats(model2_1, results, identifier = "M2_1")
# Kendall's rank correlation tau
model2_2 <- cor.test(cox$call_parent, cox$anxiety, method = "kendall")
model2_2
results <- add_stats(model2_2, results, identifier = "M2_2")
# Spearman's rank correlation rho
model2_3 <- cor.test(cox$call_parent, cox$anxiety, method = "spearman")
model2_3
results <- add_stats(model2_3, results, identifier = "M2_3")
# Test regression ---------------------------------------------------------
# Model with 1 predictor
model3_1 <- lm(call_parent ~ condition, data = cox)
summary(model3_1)
results <- add_stats(model3_1, results, identifier = "M3_1")
# Model with 2 predictors
model3_2 <- lm(call_parent ~ condition + anxiety, data = cox)
summary(model3_2)
results <- add_stats(model3_2, results, identifier = "M3_2", confirmatory = TRUE)
# Model with interaction effect
model3_3 <- lm(call_parent ~ condition * anxiety, data = cox)
summary(model3_3)
results <- add_stats(model3_3, results, identifier = "M3_3")
# Test ANOVA --------------------------------------------------------------
# Convert variables to factors
cox$condition <- factor(cox$condition)
# One-way ANOVA
model4_1 <- aov(call_parent ~ condition, data = cox)
summary(model4_1)
results <- add_stats(model4_1, results, identifier = "M4_1")
# Two-way ANOVA
model4_2 <- aov(call_parent ~ condition + sex, data = cox)
summary(model4_2)
results <- add_stats(model4_2, results, identifier = "M4_2")
# Two-way ANOVA with interaction
model4_3 <- aov(call_parent ~ condition * sex, data = cox)
summary(model4_3)
results <- add_stats(model4_3, results, identifier = "M4_3")
# ANCOVA
model4_4 <- aov(call_parent ~ condition + affect_negative, data = cox)
summary(model4_4)
results <- add_stats(model4_4, results, identifier = "M4_4")
# Prepare for repeated measures ANOVAs
cox %>%
select(ID, condition, anxiety, affect_positive, affect_negative) %>%
gather("affect", "score", affect_positive, affect_negative) %>%
arrange(ID) -> cox_long
cox_long$ID <- factor(cox_long$ID)
cox_long$affect <- factor(cox_long$affect)
# One within subject factor
model4_5 <- aov(score ~ affect + Error(ID/affect), data = cox_long)
summary(model4_5)
results <- add_stats(model4_5, results, identifier = "M4_5")
# Mixed design
model4_6 <- aov(score ~ condition * affect + Error(ID/affect) + condition, data = cox_long)
summary(model4_6)
results <- add_stats(model4_6, results, identifier = "M4_6")
# ANCOVA with within subject factor
model4_7 <- aov(score ~ affect + anxiety + Error(ID/affect) + anxiety, data = cox_long)
summary(model4_7)
results <- add_stats(model4_7, results, identifier = "M4_7")
report_table_lm(results, "M3_1")
identifier = "M3_1"
res <- results[[identifier]]
res_terms <- filter(res, term != "(Model)")
res_model <- filter(res, term == "(Model)")
if (!is.null(terms)) {
res_terms <- filter(res_terms, term %in% terms)
} else if (!is.null(term_nrs)) {
res_terms <- filter(res_terms, term_nr %in% term_nrs)
}
if (!is.null(terms)) {
res_terms <- filter(res_terms, term %in% terms)
} else if (!is.null(term_nrs)) {
res_terms <- filter(res_terms, term_nr %in% term_nrs)
}
res_terms <- res_terms %>%
spread(statistic, value) %>%
select(-term_nr, -method) %>%
rename(Term = term) %>%
select(Term, b, SE, t, df, p)
if (!is.null(term_labels)) {
res_terms$Term <- term_labels
}
if (!is.null(statistics)) {
# Check if the statistics argument only contains valid statistics
if (sum(!statistics %in% c("b", "SE", "t", "df", "p")) > 0) {
stop("The statistics argument contains invalid statistics.")
}
res_terms <- select(res_terms, Term, one_of(statistics))
}
if ("p" %in% names(res_terms)) {
res_terms$p <- report_p_value(res_terms$p)
res_terms$p <- gsub("[*p= ]", "", res_terms$p)
res_terms$p <- gsub("<", "< ", res_terms$p)
}
kable(res_terms)
library(knitr)
kable(res_terms)
output <- kable(res_terms)
footnote_model <- paste("Model:", report_lm(results, identifier, term = "(Model)"))
footnote_model
library(kableExtra)
kableExtra::add_footnote(output, footnote_model, notation = "number")
output
class(output)
paste(output)
paste(output, "test")
output[3]
output[6]
output[5] <- "test"
output
length(output)
output <- kable(res_terms)
footnote_model <- paste("Model:", report_lm(results, identifier, term = "(Model)"))
output[length(output) + 1] <- footnote_model
output
output <- kable(res_terms)
footnote_model <- paste("Model:", report_lm(results, identifier, term = "(Model)"))
output[length(output) + 1] <- ""
output[length(output) + 1] <- footnote_model
output
res_terms
names(res_terms)
names(res_terms) == "p"
which(names(res_terms) == "p")
?kable
case_when(
names(res_terms) == "Term" ~ 1,
names(res_terms) == "p" ~ 2,
TRUE ~ 2
)
align <- case_when(
names(res_terms) == "Term" ~ 1,
names(res_terms) == "p" ~ 2,
TRUE ~ 2
)
output <- kable(res_terms, align = align)
align <- case_when(
names(res_terms) == "Term" ~ "l",
names(res_terms) == "p" ~ "r",
TRUE ~ "r"
)
output <- kable(res_terms, align = align)
if (include_model) {
footnote_model <- paste("Model:", report_lm(results, identifier, term = "(Model)"))
output[length(output) + 1] <- ""
output[length(output) + 1] <- footnote_model
}
footnote_model <- paste("Model:", report_lm(results, identifier, term = "(Model)"))
output[length(output) + 1] <- ""
output[length(output) + 1] <- footnote_model
output
install()
